import java.util.*;
import java.io.*;

class Node {
    Node left;
    Node right;
    int data;
    
    Node(int data) {
        this.data = data;
        left = null;
        right = null;
    }
}

class Solution {



    public static void preOrder(Node root) {
 if(root == null){
             return;
         }
         Stack<Node> stack = new Stack();
         stack.add(root);

         while(!stack.isEmpty()){
             Node current_node = stack.pop();
             System.out.print(current_node.data + " ");

             if(current_node.right != null){
                 stack.add(current_node.right);
             }

             if(current_node.left != null){
                 stack.add(current_node.left);
             }

         }
    }
    void postOrder(Node root) {
    Node t = root;
    Deque<Node> stack = new ArrayDeque<Node>();
    stack.push(root);
    while(!stack.isEmpty() && root!=null){
        root = stack.peek();
        //nodes without children should be printed 
        if( (root.left==null&&root.right==null) 
         || (t==root.left||t==root.right) ){//or nodes whose children have already been printed 
            System.out.print(root.data+" ");
            stack.pop();
            t = root;
        }else{
            if(root.right!=null) stack.push(root.right);
            if(root.left!=null) stack.push(root.left);
        }
    }

	public static Node insert(Node root, int data) {
